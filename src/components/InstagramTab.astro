---
import PreviewEmbed from "./PreviewEmbed.astro";
import PreviewModal from "./PreviewModal.astro";
---

<div class="tab-pane fade" id="instagram-tab">
  <div class="mockup-header">
    <h2>Instagram Post</h2>
    <p>Create a realistic Instagram post mockup by editing the content below.</p>
  </div>

  <!-- Theme Controls -->
  <div class="theme-section mb-3">
    <div class="theme-controls">
      <div class="theme-selector">
        <span class="control-label">Theme:</span>
        <div class="theme-toggle-group">
          <input type="radio" class="theme-toggle" name="ig-theme" id="ig-theme-light" value="light" checked>
          <label class="theme-toggle-btn" for="ig-theme-light" title="Light theme">
            <i class="bi bi-sun"></i>
          </label>
          
          <input type="radio" class="theme-toggle" name="ig-theme" id="ig-theme-dark" value="dark">
          <label class="theme-toggle-btn" for="ig-theme-dark" title="Dark theme">
            <i class="bi bi-moon"></i>
          </label>
        </div>
      </div>

      <button type="button" class="preview-btn" onclick="showPreviewModal('instagram')">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4M10 17l5-5-5-5M13.8 12H3"/>
        </svg>
        Preview
      </button>
    </div>
  </div>

  <!-- Aspect Ratio Controls -->
  <div class="aspect-section mb-3">
    <div class="aspect-controls">
      <div class="aspect-selector">
        <span class="control-label">Aspect Ratio:</span>
        <div class="aspect-toggle-group">
          <input type="radio" class="aspect-toggle" name="ig-aspect" id="aspect-square" value="square" checked>
          <label class="aspect-toggle-btn tooltip-btn" for="aspect-square" title="Square (1:1)">
            <i class="bi bi-square"></i>
            <span class="tooltip-text">Square (1:1)</span>
          </label>
          
          <input type="radio" class="aspect-toggle" name="ig-aspect" id="aspect-portrait" value="portrait">
          <label class="aspect-toggle-btn tooltip-btn" for="aspect-portrait" title="Portrait (4:5)">
            <i class="bi bi-image"></i>
            <span class="tooltip-text">Portrait (4:5)</span>
          </label>
          
          <input type="radio" class="aspect-toggle" name="ig-aspect" id="aspect-landscape" value="landscape">
          <label class="aspect-toggle-btn tooltip-btn" for="aspect-landscape" title="Landscape (1.91:1)">
            <i class="bi bi-image-alt"></i>
            <span class="tooltip-text">Landscape (1.91:1)</span>
          </label>
        </div>
      </div>
    </div>
  </div>

  <!-- Interactive Instagram Preview -->
  <div class="instagram-container" id="instagram-preview" data-theme="light">
    <!-- Header -->
    <div class="ig-header">
      <div class="profile-section">
        <div 
          class="profile-pic cursor-pointer" 
          onclick="uploadInstagramProfilePic()"
          role="button"
          title="Click to change profile picture"
        >
          <img 
            id="ig-profile-pic" 
            src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23999' d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z'/%3E%3C/svg%3E"
            alt="Profile picture placeholder"
            class="w-100 h-100 rounded-circle"
          >
        </div>
        
        <div class="user-info">
          <div class="username-container">
            <span 
              class="username" 
              contenteditable="true" 
              id="live-ig-username"
              data-input="ig-username-input">johndoe</span>
            <span class="verified-badge" id="ig-verified-badge">
              <svg viewBox="0 0 24 24"><path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm-1.7 14.5L6.8 13l1.4-1.4 2.1 2.1L15.7 8l1.4 1.4-6.8 7.1z"/></svg>
            </span>
          </div>
          <div 
            class="location" 
            contenteditable="true" 
            id="live-ig-location"
            data-input="ig-location-input">New York, NY</div>
        </div>
      </div>

      <div class="dropdown">
        <button class="btn btn-link" data-bs-toggle="dropdown">
          <svg viewBox="0 0 48 48"><circle cx="8" cy="24" r="4.5"/><circle cx="24" cy="24" r="4.5"/><circle cx="40" cy="24" r="4.5"/></svg>
        </button>
        <ul class="dropdown-menu">
          <li><button class="dropdown-item" onclick="toggleInstagramVerified()">
            <i class="bi bi-patch-check"></i> Toggle verified
          </button></li>
          <li><button class="dropdown-item" onclick="uploadInstagramProfilePic()">
            <i class="bi bi-camera"></i> Change profile picture
          </button></li>
        </ul>
      </div>
    </div>

    <!-- Image Container -->
    <div 
      class="post-image"
      data-aspect="square"
      onclick="uploadInstagramPost()"
      role="button"
      title="Click to add photo"
    >
      <div class="upload-prompt">
        <i class="bi bi-camera"></i>
        <span>Add Photo</span>
      </div>
    </div>

    <!-- Action Buttons -->
    <div class="ig-actions d-flex justify-content-between px-3 py-2">
      <div class="d-flex gap-3">
        <button class="btn btn-link p-0">
          <svg aria-label="Like" class="x1lliihq x1n2onr6" fill="currentColor" height="24" role="img" viewBox="0 0 24 24" width="24">
            <path d="M16.792 3.904A4.989 4.989 0 0 1 21.5 9.122c0 3.072-2.652 4.959-5.197 7.222-2.512 2.243-3.865 3.469-4.303 3.752-.477-.309-2.143-1.823-4.303-3.752C5.141 14.072 2.5 12.167 2.5 9.122a4.989 4.989 0 0 1 4.708-5.218 4.21 4.21 0 0 1 3.675 1.941c.84 1.175.98 1.763 1.12 1.763s.278-.588 1.11-1.766a4.17 4.17 0 0 1 3.679-1.938m0-2a6.04 6.04 0 0 0-4.797 2.127 6.052 6.052 0 0 0-4.787-2.127A6.985 6.985 0 0 0 .5 9.122c0 3.61 2.55 5.827 5.015 7.97.283.246.569.494.853.747l1.027.918a44.998 44.998 0 0 0 3.518 3.018 2 2 0 0 0 2.174 0 45.263 45.263 0 0 0 3.626-3.115l.922-.824c.293-.26.59-.519.885-.774 2.334-2.025 4.98-4.32 4.98-7.94a6.985 6.985 0 0 0-6.708-7.218Z"></path>
          </svg>
        </button>
        <button class="btn btn-link p-0">
          <svg aria-label="Comment" class="x1lliihq x1n2onr6" fill="currentColor" height="24" role="img" viewBox="0 0 24 24" width="24">
            <path d="M20.656 17.008a9.993 9.993 0 1 0-3.59 3.615L22 22Z" fill="none" stroke="currentColor" stroke-linejoin="round" stroke-width="2"></path>
          </svg>
        </button>
        <button class="btn btn-link p-0">
          <svg aria-label="Share Post" class="x1lliihq x1n2onr6" fill="currentColor" height="24" role="img" viewBox="0 0 24 24" width="24">
            <line fill="none" stroke="currentColor" stroke-linejoin="round" stroke-width="2" x1="22" x2="9.218" y1="3" y2="10.083"></line>
            <polygon fill="none" points="11.698 20.334 22 3.001 2 3.001 9.218 10.084 11.698 20.334" stroke="currentColor" stroke-linejoin="round" stroke-width="2"></polygon>
          </svg>
        </button>
      </div>
      <button class="btn btn-link p-0">
        <svg aria-label="Save" class="x1lliihq x1n2onr6" fill="currentColor" height="24" role="img" viewBox="0 0 24 24" width="24">
          <polygon fill="none" points="20 21 12 13.44 4 21 4 3 20 3 20 21" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"></polygon>
        </svg>
      </button>
    </div>

    <!-- Likes -->
    <div class="px-3 py-1">
      <a href="/p/CN_0l9IM4Di/liked_by/" class="text-decoration-none likes-link">
        <span class="fw-bold" id="live-ig-likes" data-input="ig-likes-input">1,234</span> likes
      </a>
    </div>

    <!-- Caption -->
    <div class="px-3 py-1 caption-container">
      <span class="fw-bold username-text" contenteditable="true" id="caption-username" data-input="caption-username-input">johndoe</span>
      <span class="caption" contenteditable="true" id="live-ig-caption" data-input="ig-caption-input">
        Write a caption...
        <a href="/explore/tags/martingarrix/" class="hashtag">#MartinGarrix</a>
        <a href="/explore/tags/garrixnews/" class="hashtag">#garrixnews</a>
      </span>
    </div>

    <!-- Comments -->
    <div class="px-3 comments-container">
      <div class="text-secondary small view-comments">View all 24 comments</div>
      <div class="comment mt-2">
        <span class="fw-bold username-text">username</span>
        <span class="ms-2 comment-text" contenteditable="true" id="live-comment-1" data-input="comment-1-input">Comment text here</span>
      </div>
      <div class="comment mt-2 ms-3">
        <span class="fw-bold username-text">reply_user</span>
        <span class="ms-2 comment-text" contenteditable="true" id="live-comment-2" data-input="comment-2-input">Reply text here</span>
      </div>
      <!-- Add Comment Button -->
      <div class="add-comment-btn mt-2">
        <button class="btn btn-sm btn-link p-0" onclick="addNewComment()">
          <i class="bi bi-plus-circle"></i> Add comment
        </button>
      </div>
    </div>

    <!-- Date -->
    <div class="px-3 py-2">
      <span class="text-secondary small text-uppercase date-text" 
            contenteditable="true" 
            id="live-ig-date"
            data-input="ig-date-input">JANUARY 1, 2024</span>
    </div>

    <!-- Comment Input -->
    <div class="border-top p-3 d-flex align-items-center gap-2 comment-input-container">
      <svg aria-label="Emoji" class="x1lliihq x1n2onr6" fill="currentColor" height="24" role="img" viewBox="0 0 24 24" width="24">
        <path d="M15.83 10.997a1.167 1.167 0 1 0 1.167 1.167 1.167 1.167 0 0 0-1.167-1.167Zm-6.5 1.167a1.167 1.167 0 1 0-1.166 1.167 1.167 1.167 0 0 0 1.166-1.167Zm5.163 3.24a3.406 3.406 0 0 1-4.982.007 1 1 0 1 0-1.557 1.256 5.397 5.397 0 0 0 8.09 0 1 1 0 0 0-1.55-1.263ZM12 .503a11.5 11.5 0 1 0 11.5 11.5A11.513 11.513 0 0 0 12 .503Zm0 21a9.5 9.5 0 1 1 9.5-9.5 9.51 9.51 0 0 1-9.5 9.5Z"></path>
      </svg>
      <input type="text" class="form-control border-0 bg-transparent comment-input" id="new-comment-input" placeholder="Add a comment...">
      <button class="btn btn-link post-button p-0 text-decoration-none" onclick="postNewComment()">Post</button>
    </div>
  </div>

  <div class="col col-md-6 mt-4">
    <PreviewEmbed platform="instagram" previewSrc="/api-instagram" />
  </div>
</div>

<script is:inline>
  // Handle contenteditable sync with inputs
  document.querySelectorAll('[contenteditable]').forEach(element => {
    element.addEventListener('input', (e) => {
      const inputId = e.target.dataset.input;
      if (inputId) {
        const input = document.getElementById(inputId);
        if (input) {
          input.value = e.target.textContent;
          input.dispatchEvent(new Event('input'));
        }
      }
    });
  });

  // Initialize theme and aspect ratio controls
  document.addEventListener('DOMContentLoaded', () => {
    // Add theme change handlers
    document.querySelectorAll('input[name="ig-theme"]').forEach(radio => {
      radio.addEventListener('change', (e) => {
        const container = document.getElementById('instagram-preview');
        container.setAttribute('data-theme', e.target.value);
      });
    });

    // Add aspect ratio change handlers
    document.querySelectorAll('input[name="ig-aspect"]').forEach(radio => {
      radio.addEventListener('change', (e) => {
        const postImage = document.querySelector('#instagram-preview .post-image');
        if (postImage) {
          postImage.setAttribute('data-aspect', e.target.value);
          
          // Update any existing image to maintain aspect ratio
          const existingImage = postImage.querySelector('img');
          if (existingImage) {
            existingImage.style.aspectRatio = getAspectRatioValue(e.target.value);
          }
        }
      });
    });

    // Helper function to get aspect ratio value
    function getAspectRatioValue(aspectType) {
      switch (aspectType) {
        case 'square': return '1/1';
        case 'portrait': return '4/5';
        case 'landscape': return '1.91/1';
        default: return '1/1';
      }
    }

    // Set initial theme and aspect ratio
    const initialTheme = document.querySelector('input[name="ig-theme"]:checked').value;
    const initialAspect = document.querySelector('input[name="ig-aspect"]:checked').value;
    
    const container = document.getElementById('instagram-preview');
    const postImage = container.querySelector('.post-image');
    
    container.setAttribute('data-theme', initialTheme);
    postImage.setAttribute('data-aspect', initialAspect);
  });

  // Toggle verified badge
  function toggleInstagramVerified() {
    const verifiedInput = document.getElementById('ig-verified-input');
    const verifiedBadge = document.getElementById('ig-verified-badge');
    verifiedInput.checked = !verifiedInput.checked;
    verifiedBadge.style.display = verifiedInput.checked ? 'inline' : 'none';
    verifiedInput.dispatchEvent(new Event('input'));
  }

  // Update profile picture upload function
  function uploadInstagramProfilePic() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    input.onchange = (e) => {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          initImageCropper(e.target.result, 'instagram-profile', (croppedImageUrl) => {
            const igProfilePic = document.getElementById('ig-profile-pic');
            if (igProfilePic) {
              igProfilePic.src = croppedImageUrl;
              console.log('✅ Successfully updated Instagram profile picture');
            }
          });
        };
        reader.readAsDataURL(file);
      }
    };
    input.click();
  }

  // Update post image upload function
  function uploadInstagramPost() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    input.onchange = (e) => {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          const aspectRatio = document.querySelector('input[name="ig-aspect"]:checked').value;
          initImageCropper(e.target.result, `instagram-post-${aspectRatio}`, (croppedImageUrl) => {
            const postImage = document.querySelector('#instagram-preview .post-image');
            
            // Remove any existing images
            postImage.querySelectorAll('img').forEach(img => img.remove());
            
            // Create new image element
            const imgElement = document.createElement('img');
            imgElement.src = croppedImageUrl;
            imgElement.style.width = '100%';
            imgElement.style.height = '100%';
            imgElement.style.objectFit = 'cover';
            imgElement.style.display = 'block';
            imgElement.style.aspectRatio = getAspectRatioValue(aspectRatio);
            
            // Append the new image
            postImage.appendChild(imgElement);
            console.log('✅ Successfully updated Instagram post image');
            
            // Hide upload prompt
            const uploadPrompt = postImage.querySelector('.upload-prompt');
            if (uploadPrompt) {
              uploadPrompt.style.display = 'none';
            }

            // Update post image container aspect ratio
            postImage.setAttribute('data-aspect', aspectRatio);
          });
        };
        reader.readAsDataURL(file);
      }
    };
    input.click();
  }

  // Add event listener for cropped images
  document.addEventListener('imageCropped', (event) => {
    const { imageUrl, cropType } = event.detail;
    console.log('Instagram received crop event with type:', cropType);
    
    // Only handle Instagram-specific crop types
    if (!cropType.startsWith('instagram-')) {
      console.log('Ignoring non-Instagram crop type:', cropType);
      return;
    }
    
    if (cropType === 'instagram-profile') {
      console.log('Updating Instagram profile picture');
      const igProfilePic = document.getElementById('ig-profile-pic');
      if (igProfilePic) {
        igProfilePic.src = imageUrl;
        console.log('✅ Successfully updated Instagram profile picture');
      }
    } else if (cropType === 'instagram-post') {
      console.log('Updating Instagram post image');
      const postImage = document.querySelector('#instagram-preview .post-image');
      
      // Remove any existing images
      postImage.querySelectorAll('img').forEach(img => img.remove());
      
      // Create new image element
      const imgElement = document.createElement('img');
      imgElement.src = imageUrl;
      imgElement.style.width = '100%';
      imgElement.style.height = '100%';
      imgElement.style.objectFit = 'cover';
      imgElement.style.display = 'block';
      
      // Append the new image
      postImage.appendChild(imgElement);
      console.log('✅ Successfully updated Instagram post image');
      
      // Hide upload prompt
      const uploadPrompt = postImage.querySelector('.upload-prompt');
      if (uploadPrompt) {
        uploadPrompt.style.display = 'none';
      }
    }
  });

  // Add this function to handle theme changes
  function updateInstagramTheme(theme) {
    const container = document.getElementById('instagram-preview');
    container.setAttribute('data-theme', theme);
  }

  // Add html2canvas script if not already added
  document.addEventListener('DOMContentLoaded', function() {
    if (!document.querySelector('script[src*="html2canvas"]')) {
      const script = document.createElement('script');
      script.src = 'https://html2canvas.hertzen.com/dist/html2canvas.min.js';
      script.async = true;
      document.head.appendChild(script);
    }
  });

  // Add this function to add a new comment
  function addNewComment() {
    const commentsContainer = document.querySelector('.comments-container');
    const commentCount = document.querySelectorAll('.comment').length + 1;
    const newCommentId = `live-comment-${commentCount}`;
    const newInputId = `comment-${commentCount}-input`;
    
    // Create new comment element
    const newComment = document.createElement('div');
    newComment.className = 'comment mt-2';
    newComment.innerHTML = `
      <span class="fw-bold username-text" 
            contenteditable="true" 
            id="username-${commentCount}" 
            data-input="username-${commentCount}-input">new_user</span>
      <span class="ms-2 comment-text" 
            contenteditable="true" 
            id="${newCommentId}" 
            data-input="${newInputId}">Add your comment here</span>
    `;
    
    // Insert before the add comment button
    const addButton = commentsContainer.querySelector('.add-comment-btn');
    commentsContainer.insertBefore(newComment, addButton);
    
    // Add contenteditable event listeners to the new elements
    newComment.querySelectorAll('[contenteditable]').forEach(element => {
      element.addEventListener('input', (e) => {
        const inputId = e.target.dataset.input;
        if (inputId) {
          let input = document.getElementById(inputId);
          if (!input) {
            // Create hidden input if it doesn't exist
            input = document.createElement('input');
            input.type = 'hidden';
            input.id = inputId;
            document.body.appendChild(input);
          }
          input.value = e.target.textContent;
          input.dispatchEvent(new Event('input'));
        }
      });
    });
    
    // Focus the new comment for immediate editing
    document.getElementById(newCommentId).focus();
  }

  // Make usernames in comments editable
  document.querySelectorAll('.comment .username-text').forEach((el, index) => {
    if (!el.hasAttribute('contenteditable')) {
      el.setAttribute('contenteditable', 'true');
      el.setAttribute('id', `username-${index + 1}`);
      el.setAttribute('data-input', `username-${index + 1}-input`);
    }
  });

  // Add this function to post a new comment from the comment input
  function postNewComment() {
    const commentInput = document.getElementById('new-comment-input');
    const commentText = commentInput.value.trim();
    
    if (!commentText) return; // Don't add empty comments
    
    // Get current username from the profile
    const username = document.getElementById('live-ig-username').textContent;
    
    // Add the new comment
    const commentsContainer = document.querySelector('.comments-container');
    const commentCount = document.querySelectorAll('.comment').length + 1;
    const newCommentId = `live-comment-${commentCount}`;
    const newInputId = `comment-${commentCount}-input`;
    
    // Create new comment element
    const newComment = document.createElement('div');
    newComment.className = 'comment mt-2';
    newComment.innerHTML = `
      <span class="fw-bold username-text" 
            contenteditable="true" 
            id="username-${commentCount}" 
            data-input="username-${commentCount}-input">${username}</span>
      <span class="ms-2 comment-text" 
            contenteditable="true" 
            id="${newCommentId}" 
            data-input="${newInputId}">${commentText}</span>
    `;
    
    // Insert before the add comment button
    const addButton = commentsContainer.querySelector('.add-comment-btn');
    commentsContainer.insertBefore(newComment, addButton);
    
    // Add contenteditable event listeners to the new elements
    newComment.querySelectorAll('[contenteditable]').forEach(element => {
      element.addEventListener('input', (e) => {
        const inputId = e.target.dataset.input;
        if (inputId) {
          let input = document.getElementById(inputId);
          if (!input) {
            input = document.createElement('input');
            input.type = 'hidden';
            input.id = inputId;
            document.body.appendChild(input);
          }
          input.value = e.target.textContent;
          input.dispatchEvent(new Event('input'));
        }
      });
    });
    
    // Clear the input
    commentInput.value = '';
    
    // Update the comments count
    const viewCommentsEl = document.querySelector('.view-comments');
    const currentCount = document.querySelectorAll('.comment').length;
    viewCommentsEl.textContent = `View all ${currentCount} comments`;
  }
  
  // Add event listener to comment input to post on Enter
  document.addEventListener('DOMContentLoaded', () => {
    const commentInput = document.getElementById('new-comment-input');
    commentInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        postNewComment();
      }
    });
    
    // Sync caption username with profile username
    const profileUsername = document.getElementById('live-ig-username');
    const captionUsername = document.getElementById('caption-username');
    
    profileUsername.addEventListener('input', () => {
      captionUsername.textContent = profileUsername.textContent;
    });
  });

  // Add this function to handle hashtag and mention formatting
  function formatCaptionText(text) {
    // Format hashtags and mentions with regex
    return text.replace(/(#\w+)|(@\w+)/g, function(match) {
      if (match.startsWith('#')) {
        return `<a href="/explore/tags/${match.slice(1)}" class="hashtag">${match}</a>`;
      } else if (match.startsWith('@')) {
        return `<a href="/${match.slice(1)}" class="hashtag">${match}</a>`;
      }
    });
  }

  // Add event listener to the caption element
  document.addEventListener('DOMContentLoaded', () => {
    const captionElement = document.getElementById('live-ig-caption');
    
    captionElement.addEventListener('input', (e) => {
      // Store current cursor position and text before it
      const selection = window.getSelection();
      const range = selection.getRangeAt(0);
      
      // Get the container where cursor is
      const container = range.startContainer;
      const position = range.startOffset;
      
      // Get all text content before cursor
      let textBeforeCursor = '';
      const treeWalker = document.createTreeWalker(
        captionElement,
        NodeFilter.SHOW_TEXT,
        null,
        false
      );
      
      let node;
      let found = false;
      while ((node = treeWalker.nextNode()) && !found) {
        if (node === container) {
          textBeforeCursor += node.textContent.substring(0, position);
          found = true;
        } else {
          textBeforeCursor += node.textContent;
        }
      }
      
      // Get the raw text content
      const text = captionElement.textContent;
      
      // Format the text
      const formattedText = formatCaptionText(text);
      
      // Only update if the formatting changed something
      if (formattedText !== captionElement.innerHTML) {
        // Update content
        captionElement.innerHTML = formattedText;
        
        // Restore cursor position
        const newPosition = textBeforeCursor.length;
        
        // Find the right text node and position
        const walker = document.createTreeWalker(
          captionElement,
          NodeFilter.SHOW_TEXT,
          null,
          false
        );
        
        let currentLength = 0;
        let currentNode;
        
        while ((currentNode = walker.nextNode())) {
          if (currentLength + currentNode.length >= newPosition) {
            const range = document.createRange();
            range.setStart(currentNode, newPosition - currentLength);
            range.collapse(true);
            
            const sel = window.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
            break;
          }
          currentLength += currentNode.length;
        }
      }
    });
  });
</script>

<style>
  .instagram-container {
    max-width: 600px;
    margin: 0 auto;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    box-shadow: var(--post-shadow);
    transition: box-shadow 0.2s ease;
  }

  .instagram-container[data-theme="light"] {
    --bg-primary: #FFFFFF;
    --text-primary: #262626;
    --text-secondary: #8E8E8E;
    --border-color: #DBDBDB;
    --verified-color: #3897F0;
    --hover-bg: rgba(0, 0, 0, 0.05);
    --post-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
    --post-aspect-ratio: 1/1;
  }

  .instagram-container[data-theme="dark"] {
    --bg-primary: #000000;
    --text-primary: #F5F5F5;
    --text-secondary: #A8A8A8;
    --border-color: #262626;
    --verified-color: #3897F0;
    --hover-bg: rgba(255, 255, 255, 0.1);
    --post-shadow: 0 2px 12px rgba(255, 255, 255, 0.08),
                   0 0 20px rgba(56, 151, 240, 0.15);
    --post-aspect-ratio: 1/1;
  }

  .instagram-container:hover {
    box-shadow: var(--post-shadow),
                0 0 30px rgba(56, 151, 240, 0.1);
  }

  .ig-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 14px;
    border-bottom: 1px solid var(--border-color);
  }

  .profile-section {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .profile-pic {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    overflow: hidden;
    cursor: pointer;
    transition: opacity 0.2s ease;
  }

  .profile-pic:hover {
    opacity: 0.8;
  }

  .profile-pic img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .user-info {
    display: flex;
    flex-direction: column;
  }

  .username-container {
    display: flex;
    align-items: center;
    gap: 4px;
  }

  .username {
    font-weight: 600;
    color: var(--text-primary);
  }

  .location {
    font-size: 12px;
    color: var(--text-primary);
  }

  .verified-badge {
    display: inline-flex;
    width: 14px;
    height: 14px;
  }

  .verified-badge svg {
    fill: var(--verified-color);
  }

  .post-image {
    width: 100%;
    background-color: var(--border-color);
    cursor: pointer;
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
  }

  /* Define aspect ratios */
  .post-image[data-aspect="square"] {
    aspect-ratio: 1/1;
  }

  .post-image[data-aspect="portrait"] {
    aspect-ratio: 4/5;
  }

  .post-image[data-aspect="landscape"] {
    aspect-ratio: 1.91/1;
  }

  /* Add responsive container widths */
  @media (min-width: 768px) {
    .post-image[data-aspect="portrait"] {
      width: 100%;
      margin: 0;
    }
    
    .post-image[data-aspect="landscape"] {
      width: 100%;
      margin: 0;
    }
  }

  /* Update background image handling */
  .post-image[style*="background-image"] {
    background-size: cover;
    background-position: center;
  }

  /* Add aspect ratio indicator */
  .post-image::after {
    content: attr(data-aspect);
    position: absolute;
    bottom: 10px;
    right: 10px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 12px;
    text-transform: capitalize;
    opacity: 0.8;
  }

  .post-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    position: absolute;
    top: 0;
    left: 0;
  }

  .post-image .upload-prompt {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1;
    pointer-events: none;
  }

  .upload-prompt {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
    color: var(--text-secondary);
  }

  .upload-prompt i {
    font-size: 24px;
  }

  [contenteditable] {
    outline: none;
    padding: 2px 4px;
    border-radius: 4px;
  }

  [contenteditable]:hover {
    background: var(--hover-bg);
  }

  [contenteditable]:focus {
    background: var(--hover-bg);
    box-shadow: 0 0 0 2px rgba(56, 151, 240, 0.3);
  }

  .ig-actions {
    border-bottom: 1px solid var(--border-color);
  }

  .comment {
    font-size: 0.875rem;
    line-height: 1.25;
  }

  .comment-input {
    background: transparent;
    border: none !important;
    box-shadow: none !important;
  }

  [contenteditable][placeholder]:empty:before {
    content: attr(placeholder);
    color: var(--text-secondary);
    cursor: text;
  }

  .header-actions {
    margin-top: 1rem;
  }

  .preview-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: var(--accent-color, #0095F6);
    color: white;
    border: none;
    border-radius: 9999px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .preview-btn:hover {
    background: #0081D6;
  }

  .preview-btn svg {
    transition: transform 0.2s ease;
  }

  .preview-btn:hover svg {
    transform: translateX(2px);
  }

  /* Theme Controls */
  .theme-section,
  .aspect-section {
    width: 100%;
    max-width: 800px;
    margin: 0 auto 2rem;
    padding: 0 1rem;
  }

  .theme-controls,
  .aspect-controls {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    justify-content: space-between;
    background: var(--bg-primary);
    padding: 1rem 1.5rem;
    border-radius: 16px;
    border: 1px solid var(--border-color);
    flex-wrap: wrap;
  }

  .theme-selector,
  .aspect-selector {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .control-label {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--text-secondary);
    white-space: nowrap;
  }

  /* Theme Toggle Group */
  .theme-toggle-group,
  .aspect-toggle-group {
    display: flex;
    gap: 4px;
    padding: 4px;
    background: var(--bg-secondary);
    border-radius: 9999px;
    border: 1px solid var(--border-color);
    position: relative;
  }

  .theme-toggle,
  .aspect-toggle {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
  }

  .theme-toggle-btn,
  .aspect-toggle-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    cursor: pointer;
    position: relative;
    z-index: 1;
    color: var(--text-secondary);
    transition: all 0.2s ease;
  }

  .theme-toggle-btn:hover,
  .aspect-toggle-btn:hover {
    color: var(--text-primary);
    background: rgba(var(--accent-rgb), 0.1);
  }

  .theme-toggle:checked + .theme-toggle-btn,
  .aspect-toggle:checked + .aspect-toggle-btn {
    color: var(--accent-color);
    background: rgba(var(--accent-rgb), 0.15);
  }

  .theme-toggle:checked + .theme-toggle-btn::after,
  .aspect-toggle:checked + .aspect-toggle-btn::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    box-shadow: 0 0 0 2px var(--accent-color);
    opacity: 0.4;
    z-index: -1;
  }

  .theme-toggle-btn i,
  .aspect-toggle-btn i {
    font-size: 1.2rem;
  }

  /* Preview Button */
  .preview-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: var(--accent-color);
    color: white;
    border: none;
    border-radius: 9999px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .preview-btn:hover {
    background: var(--accent-hover);
  }

  .preview-btn svg {
    transition: transform 0.2s ease;
  }

  .preview-btn:hover svg {
    transform: translateX(2px);
  }

  /* Tooltip */
  .tooltip-btn {
    position: relative;
  }

  .tooltip-text {
    position: absolute;
    top: -40px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.75rem;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s ease, visibility 0.2s ease;
    pointer-events: none;
    z-index: 1000;
  }

  .tooltip-text::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: rgba(0, 0, 0, 0.8) transparent transparent transparent;
  }

  .tooltip-btn:hover .tooltip-text {
    opacity: 1;
    visibility: visible;
  }

  /* Add accent hover color */
  .instagram-container {
    --accent-hover: #0081D6;
    --accent-rgb: 56, 151, 240;
    --accent-color: #3897F0;
  }

  /* Fix text colors for dark theme */
  .likes-link {
    color: var(--text-primary);
  }
  
  .username-text, 
  .caption,
  .comment-text {
    color: var(--text-primary);
  }
  
  .view-comments,
  .date-text {
    color: var(--text-secondary) !important;
  }
  
  .hashtag {
    color: var(--accent-color);
    text-decoration: none;
  }

  .comment-input {
    color: var(--text-primary);
  }
  
  .comment-input::placeholder {
    color: var(--text-secondary);
  }
  
  .post-button {
    color: var(--accent-color) !important;
  }
  
  /* Button colors in dark mode */
  .btn-link {
    color: var(--text-primary);
  }
  
  /* Border color fixes */
  .border-top {
    border-top-color: var(--border-color) !important;
  }

  /* Styling for add comment button */
  .add-comment-btn {
    color: var(--text-secondary);
    font-size: 0.875rem;
  }
  
  .add-comment-btn .btn-link {
    color: var(--text-secondary);
    font-size: 0.875rem;
    padding: 0;
  }
  
  .add-comment-btn .btn-link:hover {
    color: var(--accent-color);
    text-decoration: none;
  }
  
  /* Highlight editable areas on hover */
  [contenteditable].username-text:hover,
  [contenteditable].comment-text:hover {
    background: var(--hover-bg);
    border-radius: 4px;
  }

  /* Sync username between profile and caption */
  #caption-username {
    cursor: pointer;
  }
  
  /* Empty comment state */
  .comment-input:focus::placeholder {
    opacity: 0.5;
  }
</style>

<PreviewModal /> 