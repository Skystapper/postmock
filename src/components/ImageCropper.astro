---
---
<div class="image-cropper-modal" id="cropperModal" data-theme="light">
  <div class="modal-content">
    <div class="modal-header">
      <h5 class="modal-title">Crop Image</h5>
      <button type="button" class="btn-close" onclick="closeCropperModal()"></button>
    </div>
    <div class="modal-body">
      <div class="crop-container">
        <img id="cropperImage" src="" alt="Image to crop">
      </div>
      <div class="crop-controls mt-3">
        <div class="aspect-ratio-controls mb-2">
          <!-- <label class="form-label d-block mb-2">Aspect Ratio</label>
          <div class="btn-group" role="group">
            <input type="radio" class="btn-check" name="aspectRatio" id="ratioSquare" value="square" checked>
            <label class="btn btn-outline-secondary" for="ratioSquare">1:1</label>
            
            <input type="radio" class="btn-check" name="aspectRatio" id="ratioPortrait" value="portrait">
            <label class="btn btn-outline-secondary" for="ratioPortrait">4:5</label>
            
            <input type="radio" class="btn-check" name="aspectRatio" id="ratioLandscape" value="landscape">
            <label class="btn btn-outline-secondary" for="ratioLandscape">1.91:1</label> -->
          </div>
        </div>
        
        <div class="shape-controls">
          <label class="form-label d-block mb-2">Shape</label>
          <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="cropShape" id="squareCrop" value="square" checked>
            <label class="form-check-label" for="squareCrop">Square</label>
          </div>
          <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="cropShape" id="circleCrop" value="circle">
            <label class="form-check-label" for="circleCrop">Circle</label>
          </div>
        </div>
      </div>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-secondary" onclick="closeCropperModal()">Cancel</button>
      <button type="button" class="btn btn-primary" onclick="cropImage()" id="cropButton">
        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
        Crop
      </button>
    </div>
  </div>
</div>

<style>
  .image-cropper-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    padding: 20px;
  }

  .modal-content {
    background: white;
    max-width: 600px;
    margin: 30px auto;
    border-radius: 8px;
    overflow: hidden;
  }

  .modal-header {
    padding: 1rem;
    border-bottom: 1px solid #dee2e6;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .modal-body {
    padding: 1rem;
  }

  .modal-footer {
    padding: 1rem;
    border-top: 1px solid #dee2e6;
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
  }

  .crop-container {
    max-height: 500px;
    overflow: hidden;
    border-radius: 8px;
  }

  #cropperImage {
    max-width: 100%;
    height: auto;
  }

  .aspect-ratio-controls .btn-group {
    width: 100%;
  }

  .aspect-ratio-controls .btn {
    flex: 1;
  }

  .shape-controls {
    display: none;
  }

  .image-cropper-modal[data-theme="light"] .modal-content {
    background: #fff;
    color: #222;
  }
  .image-cropper-modal[data-theme="dim"] .modal-content {
    background: #1e2732;
    color: #f7f9f9;
  }
  .image-cropper-modal[data-theme="dark"] .modal-content {
    background: #15202b;
    color: #f7f9f9;
  }
</style>

<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">

<script is:inline>
let cropper = null;
let currentCropType = null;
let cropCallback = null;

// Initialize cropper with specific settings based on type
function initImageCropper(imageUrl, cropperType, callback) {
  // Get references to DOM elements
  const cropperModal = document.getElementById('cropperModal');
  const cropperImage = document.getElementById('cropperImage');
  const saveButton = document.getElementById('cropButton');
  
  // Store current crop type and callback
  currentCropType = cropperType;
  cropCallback = callback;
  
  // Set source image and show modal
  cropperImage.src = imageUrl;
  cropperModal.style.display = 'flex';
  
  // Destroy any existing cropper instance
  if (cropper) {
    cropper.destroy();
    cropper = null;
  }
  
  // Configure cropper based on type
  let aspectRatio, minWidth, minHeight;
  
  if (cropperType === 'instagram-profile' || cropperType === 'twitter-profile') {
    // Profile pictures should always be square regardless of platform
    aspectRatio = 1;
    minWidth = 150;
    minHeight = 150;
  } else if (cropperType === 'facebook-profile') {
    // Facebook profile pictures are square
    aspectRatio = 1;
    minWidth = 170;
    minHeight = 170;
  } else if (cropperType === 'facebook-post') {
    // Facebook post images have 16:9 aspect ratio
    aspectRatio = 16/9;
    minWidth = 600;
    minHeight = 340;
  } else if (cropperType === 'instagram-square') {
    aspectRatio = 1;
    minWidth = 500;
    minHeight = 500;
  } else if (cropperType === 'instagram-portrait') {
    aspectRatio = 4/5;
    minWidth = 500;
    minHeight = 600;
  } else if (cropperType === 'instagram-landscape') {
    aspectRatio = 1.91;
    minWidth = 800;
    minHeight = 420;
  } else {
    // Default: square
    aspectRatio = 1;
    minWidth = 500;
    minHeight = 500;
  }
  
  // Initialize cropper once image is loaded
  cropperImage.onload = function() {
    cropper = new Cropper(cropperImage, {
      aspectRatio: aspectRatio,
      viewMode: 1,
      dragMode: 'move',
      autoCropArea: 0.8,
      restore: false,
      guides: true,
      center: true,
      highlight: false,
      cropBoxMovable: true,
      cropBoxResizable: true,
      toggleDragModeOnDblclick: false,
      minContainerWidth: 300,
      minContainerHeight: 300,
      minCropBoxWidth: minWidth,
      minCropBoxHeight: minHeight,
      ready: function() {
        // For profile pictures, enforce circular crop preview
        if (cropperType === 'instagram-profile' || cropperType === 'twitter-profile' || cropperType === 'facebook-profile') {
          // Add a circular mask to the crop box
          const cropBoxContainer = document.querySelector('.cropper-view-box');
          if (cropBoxContainer) {
            cropBoxContainer.style.borderRadius = '50%';
            cropBoxContainer.style.overflow = 'hidden';
          }
          
          // Make the grid/line indicators also circular
          const cropperFace = document.querySelector('.cropper-face');
          if (cropperFace) {
            cropperFace.style.borderRadius = '50%';
          }
        }
      }
    });
  };
  
  // Set up save button callback
  saveButton.onclick = function() {
    if (!cropper) return;
    
    try {
      // Get cropped canvas with high quality settings
      const croppedCanvas = cropper.getCroppedCanvas({
        width: minWidth * 2, // Double the minimum dimensions for higher quality
        height: minHeight * 2,
        minWidth: minWidth,
        minHeight: minHeight,
        maxWidth: 4000, // Allow very high resolution
        maxHeight: 4000,
        fillColor: 'transparent',
        imageSmoothingEnabled: true,
        imageSmoothingQuality: 'high'
      });
      
      // Convert to data URL with maximum quality
      let mimeType = 'image/png'; // Use PNG for best quality and transparency support
      
      // For profile pictures, use higher compression PNG for best quality
      if (cropperType === 'instagram-profile' || cropperType === 'twitter-profile' || cropperType === 'facebook-profile') {
        const dataUrl = croppedCanvas.toDataURL(mimeType, 1.0);
        if (typeof callback === 'function') {
          callback(dataUrl);
        }
      } else {
        // For post images, use PNG for best quality
        const dataUrl = croppedCanvas.toDataURL(mimeType, 1.0);
        if (typeof callback === 'function') {
          callback(dataUrl);
        }
      }
      
      // Close modal and cleanup
      cropperModal.style.display = 'none';
      cropper.destroy();
      cropper = null;
    } catch (e) {
      console.error('Error saving cropped image:', e);
      alert('There was an error processing the image. Please try again.');
    }
  };
  
  // Cancel button closes modal without saving
  const cancelButton = document.querySelector('.modal-footer .btn-secondary');
  cancelButton.onclick = function() {
    cropperModal.style.display = 'none';
    if (cropper) {
      cropper.destroy();
      cropper = null;
    }
  };
}

function getAspectRatio(type = 'square') {
  switch (type) {
    case 'portrait':
      return 4/5;
    case 'landscape':
      return 1.91;
    case 'square':
    default:
      return 1;
  }
}

function closeCropperModal() {
  const modal = document.getElementById('cropperModal');
  modal.style.display = 'none';
  if (cropper) {
    cropper.destroy();
    cropper = null;
  }
  currentCropType = null;
  cropCallback = null;
}

async function cropImage() {
  if (!cropper || !currentCropType) {
    console.warn('Missing required cropping parameters');
    return;
  }

  const cropButton = document.getElementById('cropButton');
  const spinner = cropButton.querySelector('.spinner-border');
  
  try {
    console.log('Starting crop process');
    cropButton.disabled = true;
    spinner.classList.remove('d-none');

    // Determine optimal size and settings based on crop type
    let canvasWidth, canvasHeight, isProfilePic;
    
    // Force square aspect ratio for profile pictures
    if (currentCropType.includes('profile')) {
      isProfilePic = true;
      // Facebook recommends 170x170px minimum for profile pictures
      if (currentCropType === 'facebook-profile') {
        canvasWidth = 400;  // Higher resolution for better quality
        canvasHeight = 400;
      } else {
        canvasWidth = 1000; // Higher resolution for profile images
        canvasHeight = 1000; // Force 1:1 ratio
      }
    } 
    // For Facebook posts, use recommended dimensions
    else if (currentCropType === 'facebook-post') {
      isProfilePic = false;
      canvasWidth = 1200;    // Optimal width for Facebook posts
      canvasHeight = 675;    // 16:9 aspect ratio
    }
    // For Instagram posts, use aspect-ratio appropriate resolution
    else if (currentCropType.includes('instagram')) {
      isProfilePic = false;
      if (currentCropType.includes('square')) {
        canvasWidth = 1080;
        canvasHeight = 1080;
      } else if (currentCropType.includes('portrait')) {
        canvasWidth = 1080;
        canvasHeight = 1350; // 4:5 ratio
      } else if (currentCropType.includes('landscape')) {
        canvasWidth = 1080;
        canvasHeight = 565; // 1.91:1 ratio
      } else {
        // Default Instagram square
        canvasWidth = 1080;
        canvasHeight = 1080;
      }
    } else {
      // Default settings
      canvasWidth = 1080;
      canvasHeight = 1080;
      isProfilePic = false;
    }

    // Create cropped canvas with high quality settings
    const croppedCanvas = cropper.getCroppedCanvas({
      width: canvasWidth,
      height: canvasHeight,
      minWidth: canvasWidth / 2,
      minHeight: canvasHeight / 2,
      maxWidth: canvasWidth * 2, // Allow for even higher resolution
      maxHeight: canvasHeight * 2,
      imageSmoothingEnabled: true,
      imageSmoothingQuality: 'high',
      fillColor: 'transparent'
    });

    if (!croppedCanvas) {
      throw new Error('Failed to create cropped canvas');
    }

    console.log('Successfully created cropped canvas');
    
    // For profile pictures, ensure proper rendering as circular
    if (isProfilePic) {
      // For profile photos, use PNG to preserve transparency
      const dataUrl = croppedCanvas.toDataURL('image/png', 1.0);
      console.log('Created high-quality profile picture');
      cropCallback(dataUrl);
    } else {
      // For post images, use PNG for highest quality
      const dataUrl = croppedCanvas.toDataURL('image/png', 1.0);
      console.log(`Created high-quality post image for ${currentCropType}`);
      cropCallback(dataUrl);
    }
    
    console.log(`✅ Successfully cropped image for type: ${currentCropType}`);
    closeCropperModal();
  } catch (error) {
    console.error('Error during crop:', error);
    alert('Failed to crop image. Please try again.');
  } finally {
    cropButton.disabled = false;
    spinner.classList.add('d-none');
  }
}

// Handle ESC key to close modal
document.addEventListener('keydown', (e) => {
  if (e.key === 'Escape') {
    closeCropperModal();
  }
});

// Expose the initImageCropper function globally
window.initImageCropper = initImageCropper;

// Theme sync for cropper modal
function updateCropperTheme(theme) {
  const modal = document.getElementById('cropperModal');
  if (modal) {
    modal.setAttribute('data-theme', theme);
  }
}

// Listen for main app theme changes
function listenForAppThemeChanges() {
  const appContainer = document.querySelector('.app-container');
  if (!appContainer) return;
  // Set initial theme
  updateCropperTheme(appContainer.getAttribute('data-theme') || 'light');
  // Listen for changes
  const observer = new MutationObserver(() => {
    updateCropperTheme(appContainer.getAttribute('data-theme') || 'light');
  });
  observer.observe(appContainer, { attributes: true, attributeFilter: ['data-theme'] });
}
document.addEventListener('DOMContentLoaded', listenForAppThemeChanges);
</script> 