---
---
<div class="image-cropper-modal" id="cropperModal">
  <div class="modal-content">
    <div class="modal-header">
      <h5 class="modal-title">Crop Image</h5>
      <button type="button" class="btn-close" onclick="closeCropperModal()"></button>
    </div>
    <div class="modal-body">
      <div class="crop-container">
        <img id="cropperImage" src="" alt="Image to crop">
      </div>
      <div class="crop-controls mt-3">
        <div class="aspect-ratio-controls mb-2">
          <label class="form-label d-block mb-2">Aspect Ratio</label>
          <div class="btn-group" role="group">
            <input type="radio" class="btn-check" name="aspectRatio" id="ratioSquare" value="square" checked>
            <label class="btn btn-outline-secondary" for="ratioSquare">1:1</label>
            
            <input type="radio" class="btn-check" name="aspectRatio" id="ratioPortrait" value="portrait">
            <label class="btn btn-outline-secondary" for="ratioPortrait">4:5</label>
            
            <input type="radio" class="btn-check" name="aspectRatio" id="ratioLandscape" value="landscape">
            <label class="btn btn-outline-secondary" for="ratioLandscape">1.91:1</label>
          </div>
        </div>
        
        <div class="shape-controls">
          <label class="form-label d-block mb-2">Shape</label>
          <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="cropShape" id="squareCrop" value="square" checked>
            <label class="form-check-label" for="squareCrop">Square</label>
          </div>
          <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="cropShape" id="circleCrop" value="circle">
            <label class="form-check-label" for="circleCrop">Circle</label>
          </div>
        </div>
      </div>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-secondary" onclick="closeCropperModal()">Cancel</button>
      <button type="button" class="btn btn-primary" onclick="cropAndUpload()" id="cropButton">
        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
        Crop & Upload
      </button>
    </div>
  </div>
</div>

<style>
  .image-cropper-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    padding: 20px;
  }

  .modal-content {
    background: white;
    max-width: 600px;
    margin: 30px auto;
    border-radius: 8px;
    overflow: hidden;
  }

  .modal-header {
    padding: 1rem;
    border-bottom: 1px solid #dee2e6;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .modal-body {
    padding: 1rem;
  }

  .modal-footer {
    padding: 1rem;
    border-top: 1px solid #dee2e6;
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
  }

  .crop-container {
    max-height: 500px;
    overflow: hidden;
    border-radius: 8px;
  }

  #cropperImage {
    max-width: 100%;
    height: auto;
  }

  .aspect-ratio-controls .btn-group {
    width: 100%;
  }

  .aspect-ratio-controls .btn {
    flex: 1;
  }

  .shape-controls {
    display: none;
  }
</style>

<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">

<script is:inline>
let cropper = null;
let currentCropType = 'post'; // 'post' or 'profile'

function initCropper(imgSrc, options = {}) {
  const modal = document.getElementById('cropperModal');
  const image = document.getElementById('cropperImage');
  currentCropType = options.type || 'post';
  
  modal.style.display = 'block';
  image.src = imgSrc;
  
  // Destroy existing cropper if any
  if (cropper) {
    cropper.destroy();
  }

  // Show/hide controls based on crop type
  const aspectControls = document.querySelector('.aspect-ratio-controls');
  const shapeControls = document.querySelector('.shape-controls');
  
  if (currentCropType === 'profile') {
    aspectControls.style.display = 'none';
    shapeControls.style.display = 'block';
    document.getElementById('circleCrop').checked = true;
  } else {
    aspectControls.style.display = 'block';
    shapeControls.style.display = 'none';
    document.getElementById('ratioSquare').checked = true;
  }

  // Get initial aspect ratio
  const aspectRatio = getAspectRatio();

  // Initialize cropper
  cropper = new Cropper(image, {
    aspectRatio: aspectRatio,
    viewMode: 1,
    dragMode: 'move',
    autoCropArea: 0.9,
    restore: false,
    guides: true,
    center: true,
    highlight: false,
    cropBoxMovable: true,
    cropBoxResizable: true,
    toggleDragModeOnDblclick: false,
    ready: function() {
      if (currentCropType === 'profile') {
        document.querySelector('.cropper-view-box').style.borderRadius = '50%';
        document.querySelector('.cropper-face').style.borderRadius = '50%';
      }
    }
  });

  // Handle aspect ratio change
  document.querySelectorAll('input[name="aspectRatio"]').forEach(input => {
    input.addEventListener('change', (e) => {
      const newRatio = getAspectRatio(e.target.value);
      cropper.setAspectRatio(newRatio);
    });
  });

  // Handle shape change for profile pictures
  document.querySelectorAll('input[name="cropShape"]').forEach(input => {
    input.addEventListener('change', (e) => {
      const isCircle = e.target.value === 'circle';
      document.querySelector('.cropper-view-box').style.borderRadius = isCircle ? '50%' : '0';
      document.querySelector('.cropper-face').style.borderRadius = isCircle ? '50%' : '0';
    });
  });
}

function getAspectRatio(type = 'square') {
  switch (type) {
    case 'portrait':
      return 4/5;
    case 'landscape':
      return 1.91;
    case 'square':
    default:
      return 1;
  }
}

function getOutputSize(type = 'square') {
  switch (type) {
    case 'portrait':
      return { width: 1080, height: 1350 };
    case 'landscape':
      return { width: 1080, height: 565 };
    case 'square':
    default:
      return { width: 1080, height: 1080 };
  }
}

function closeCropperModal() {
  const modal = document.getElementById('cropperModal');
  modal.style.display = 'none';
  if (cropper) {
    cropper.destroy();
    cropper = null;
  }
}

async function cropAndUpload() {
  if (!cropper) return;

  const cropButton = document.getElementById('cropButton');
  const spinner = cropButton.querySelector('.spinner-border');
  
  try {
    cropButton.disabled = true;
    spinner.classList.remove('d-none');

    const aspectType = document.querySelector('input[name="aspectRatio"]:checked')?.value || 'square';
    const outputSize = getOutputSize(aspectType);
    
    let croppedCanvas = cropper.getCroppedCanvas({
      width: outputSize.width,
      height: outputSize.height,
      imageSmoothingEnabled: true,
      imageSmoothingQuality: 'high',
    });

    if (currentCropType === 'profile' && document.getElementById('circleCrop').checked) {
      // Create circular crop for profile pictures
      const circleCanvas = document.createElement('canvas');
      circleCanvas.width = croppedCanvas.width;
      circleCanvas.height = croppedCanvas.height;
      const ctx = circleCanvas.getContext('2d');
      
      ctx.beginPath();
      ctx.arc(
        circleCanvas.width / 2,
        circleCanvas.height / 2,
        circleCanvas.width / 2,
        0,
        Math.PI * 2
      );
      ctx.clip();
      
      ctx.drawImage(croppedCanvas, 0, 0);
      croppedCanvas = circleCanvas;
    }

    const blob = await new Promise(resolve => croppedCanvas.toBlob(resolve, 'image/png'));
    const imageUrl = URL.createObjectURL(blob);
    
    if (currentCropType === 'profile') {
      const profilePic = document.getElementById('ig-profile-pic');
      profilePic.src = imageUrl;
    } else {
      // Find the post image container within Instagram preview
      const postImage = document.querySelector('#instagram-preview .post-image');
      
      // Remove any existing images
      postImage.querySelectorAll('img').forEach(img => img.remove());
      
      // Create new image element
      const imgElement = document.createElement('img');
      imgElement.src = imageUrl;
      imgElement.style.width = '100%';
      imgElement.style.height = '100%';
      imgElement.style.objectFit = 'cover';
      imgElement.style.display = 'block'; // Ensure block display
      
      // Append the new image
      postImage.appendChild(imgElement);
      
      // Update container styles
      postImage.style.aspectRatio = `${outputSize.width}/${outputSize.height}`;
      postImage.dataset.aspect = aspectType;
      
      // Hide upload prompt
      const uploadPrompt = postImage.querySelector('.upload-prompt');
      if (uploadPrompt) {
        uploadPrompt.style.display = 'none';
      }

      // Clear any background styles that might interfere
      postImage.style.backgroundImage = 'none';
      postImage.style.backgroundColor = 'transparent';
    }

    closeCropperModal();
  } catch (error) {
    console.error('Error cropping image:', error);
    alert('Failed to crop image. Please try again.');
  } finally {
    cropButton.disabled = false;
    spinner.classList.add('d-none');
  }
}

// Handle ESC key to close modal
document.addEventListener('keydown', (e) => {
  if (e.key === 'Escape') {
    closeCropperModal();
  }
});
</script> 