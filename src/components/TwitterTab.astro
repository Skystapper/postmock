---
import ImageCropper from "./ImageCropper.astro";
import XPost from './XPost.astro';
import PreviewModal from './PreviewModal.astro';
import '../styles/TwitterTab.css';
---

<div class="tab-pane fade show active" id="twitter-tab">
  <div class="mockup-header">
    <h2>Twitter Post</h2>
    <p>Create a realistic Twitter post mockup by editing the content below.</p>
  </div>

      <!-- Dimension Controls -->
  <div class="dimension-section mb-3">
      <div class="dimension-controls">
      <div class="dimension-label">Image Size:</div>
      
      <div class="control-row">
        <div class="dimension-field">
          <span class="field-label">WIDTH</span>
          <div class="field-input-group">
            <button class="field-btn" onclick="adjustDimension('width', -1)">
              <i class="bi bi-dash"></i>
            </button>
              <input 
                type="text" 
                id="image-width" 
              class="field-input" 
                value="1200"
                onchange="validateDimension(this, 300, 4096)"
            >
            <button class="field-btn" onclick="adjustDimension('width', 1)">
              <i class="bi bi-plus"></i>
            </button>
          </div>
        </div>

        <div class="dimension-separator">×</div>
        
        <div class="dimension-field">
          <span class="field-label">HEIGHT</span>
          <div class="field-input-group">
            <button class="field-btn" onclick="adjustDimension('height', -1)">
              <i class="bi bi-dash"></i>
            </button>
              <input 
                type="text" 
                id="image-height" 
              class="field-input" 
                value="675"
                onchange="validateDimension(this, 300, 4096)"
              >
            <button class="field-btn" onclick="adjustDimension('height', 1)">
              <i class="bi bi-plus"></i>
            </button>
              </div>
            </div>
        
        <div class="dimension-actions">
          <button class="action-btn reset-btn" onclick="resetSize()">
            <i class="bi bi-arrow-counterclockwise"></i>
            Reset
            </button>
        </div>
          </div>
        </div>
      </div>

  <!-- Theme Controls -->
  <div class="theme-section mb-3">
    <div class="theme-controls">
      <div class="theme-selector">
        <span class="control-label">Theme:</span>
        <div class="theme-toggle-group">
          <input type="radio" class="theme-toggle" name="theme" id="theme-light" value="light" checked>
          <label class="theme-toggle-btn" for="theme-light" title="Light theme">
            <i class="bi bi-sun"></i>
          </label>
          
          <input type="radio" class="theme-toggle" name="theme" id="theme-dim" value="dim">
          <label class="theme-toggle-btn" for="theme-dim" title="Dim theme">
            <i class="bi bi-moon-stars"></i>
          </label>
          
          <input type="radio" class="theme-toggle" name="theme" id="theme-dark" value="dark">
          <label class="theme-toggle-btn" for="theme-dark" title="Dark theme">
            <i class="bi bi-moon"></i>
          </label>
        </div>
      </div>

      <button class="modern-btn labeled-btn tooltip-btn" onclick="randomizeStats()" title="Generate random engagement stats">
          <i class="bi bi-shuffle"></i>
        <span class="btn-label">Randomize Stats</span>
        <span class="tooltip-text">Generate random engagement numbers</span>
      </button>

      <button type="button" class="preview-btn" onclick="showPreviewModal('twitter')">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4M10 17l5-5-5-5M13.8 12H3"/>
        </svg>
        Preview
        </button>
    </div>
  </div>

  <!-- Tweet Container -->
  <div class="tweet-wrapper" id="tweet-wrapper">
  <div class="tweet-container" id="tweet-preview" data-theme="light">
    <div class="tweet-header d-flex align-items-center gap-3 mb-2">
      <div 
        class="profile-pic rounded-circle bg-primary cursor-pointer" 
        style="width: 48px; height: 48px;"
        onclick="uploadTwitterProfilePic()"
        role="button"
        title="Click to change profile picture"
      >
        <img 
          id="profile-pic" 
          src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23999' d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z'/%3E%3C/svg%3E"
          alt="Profile picture placeholder" 
          class="w-100 h-100 rounded-circle"
        >
      </div>
      
      <div class="user-info flex-grow-1">
        <div class="d-flex align-items-center gap-1">
          <span 
            class="name fw-bold" 
            contenteditable="true" 
            id="live-name"
            data-input="username-input">John Doe</span>
          <span class="verified-badge" id="verified-badge">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="#1DA1F2"><path d="M22.5 12.5c0-1.58-.875-2.95-2.148-3.6.154-.435.238-.905.238-1.4 0-2.21-1.71-3.998-3.818-3.998-.47 0-.92.084-1.336.25C14.818 2.415 13.51 1.5 12 1.5s-2.816.917-3.437 2.25c-.415-.165-.866-.25-1.336-.25-2.11 0-3.818 1.79-3.818 4 0 .494.083.964.237 1.4-1.272.65-2.147 2.018-2.147 3.6 0 1.495.782 2.798 1.942 3.486-.02.17-.032.34-.032.514 0 2.21 1.708 4 3.818 4 .47 0 .92-.086 1.335-.25.62 1.334 1.926 2.25 3.437 2.25 1.512 0 2.818-.916 3.437-2.25.415.163.865.248 1.336.248 2.11 0 3.818-1.79 3.818-4 0-.174-.012-.344-.033-.513 1.158-.687 1.943-1.99 1.943-3.484zm-6.616-3.334l-4.334 6.5c-.145.217-.382.334-.625.334-.143 0-.288-.04-.416-.126l-.115-.094-2.415-2.415c-.293-.293-.293-.768 0-1.06s.768-.294 1.06 0l1.77 1.767 3.825-5.74c.23-.345.696-.436 1.04-.207.346.23.44.696.21 1.04z"></path></svg>
          </span>
        </div>
        <div 
          class="handle text-secondary" 
          contenteditable="true" 
          id="live-handle"
          data-input="handle-input">@johndoe</div>
      </div>

      <div class="dropdown">
        <button class="btn btn-link text-secondary" data-bs-toggle="dropdown">
          <i class="bi bi-three-dots"></i>
        </button>
        <ul class="dropdown-menu">
          <li><button class="dropdown-item" onclick="toggleVerified()">
            <i class="bi bi-patch-check"></i> Toggle verified
          </button></li>
          <li><button class="dropdown-item" onclick="uploadTwitterProfilePic()">
            <i class="bi bi-camera"></i> Change profile picture
          </button></li>
        </ul>
      </div>
    </div>

    <div 
      class="tweet-content mb-3" 
      contenteditable="true" 
      id="live-text"
      data-input="text-input">Your tweet here!</div>

    <div class="tweet-meta text-secondary small">
      <span 
        class="tweet-time" 
        contenteditable="true" 
        id="live-date"
        data-input="date-input">12:00 PM · Jan 1, 2023</span>
      <span>· Twitter for iPhone</span>
    </div>

    <hr class="my-3">

    <div class="tweet-stats d-flex gap-3 text-secondary">
      <div class="stat">
        <span 
          class="stat-number" 
          contenteditable="true" 
          id="live-retweets"
          data-input="retweets-input">0</span>
        <span class="stat-label">Retweets</span>
      </div>
      <div class="stat">
        <span 
          class="stat-number" 
          contenteditable="true" 
          id="live-quotes"
          data-input="quotes-input">0</span>
        <span class="stat-label">Quote Tweets</span>
      </div>
      <div class="stat">
        <span 
          class="stat-number" 
          contenteditable="true" 
          id="live-likes"
          data-input="likes-input">0</span>
        <span class="stat-label">Likes</span>
        </div>
      </div>
    </div>
  </div>

  <!-- New X Design (initially hidden) -->
  <div class="tweet-wrapper" id="x-wrapper">
  <div class="x-container" id="x-preview" style="display: none;">
    <XPost
      username="John Doe"
      handle="johndoe"
      verified={true}
      text="Your tweet content here!"
      date="8:21 PM · Mar 12, 2024"
      views="2.7M"
      replies="1K"
      reposts="6K"
      likes="34K"
      bookmarks="143"
      theme="dark"
    />
    </div>
  </div>

  <!-- Platform Toggle -->
  <div class="platform-toggle-section mt-3">
    <div class="platform-toggle-wrapper">
      <div class="platform-toggle-container">
        <span class="platform-label">Toggle Platform:</span>
        <label class="modern-switch" title="Switch between Twitter and X styles">
          <input 
            type="checkbox" 
            id="platform-switch"
            onchange="togglePlatformStyle(this.checked)"
          >
          <span class="switch-slider">
            <svg class="twitter-icon" viewBox="0 0 24 24">
              <path fill="currentColor" d="M23.643 4.937c-.835.37-1.732.62-2.675.733.962-.576 1.7-1.49 2.048-2.578-.9.534-1.897.922-2.958 1.13-.85-.904-2.06-1.47-3.4-1.47-2.572 0-4.658 2.086-4.658 4.66 0 .364.042.718.12 1.06-3.873-.195-7.304-2.05-9.602-4.868-.4.69-.63 1.49-.63 2.342 0 1.616.823 3.043 2.072 3.878-.764-.025-1.482-.234-2.11-.583v.06c0 2.257 1.605 4.14 3.737 4.568-.392.106-.803.162-1.227.162-.3 0-.593-.028-.877-.082.593 1.85 2.313 3.198 4.352 3.234-1.595 1.25-3.604 1.995-5.786 1.995-.376 0-.747-.022-1.112-.065 2.062 1.323 4.51 2.093 7.14 2.093 8.57 0 13.255-7.098 13.255-13.254 0-.2-.005-.402-.014-.602.91-.658 1.7-1.477 2.323-2.41z"/>
            </svg>
            <svg class="x-icon" viewBox="0 0 24 24">
              <path fill="currentColor" d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
            </svg>
          </span>
        </label>
        <span class="platform-indicator">
          <span class="platform-twitter">Twitter</span>
          <span class="platform-x">X</span>
        </span>
      </div>
    </div>
  </div>
</div>

<ImageCropper />

<input type="hidden" id="theme-input" value="light">
<input type="hidden" id="views-input" value="0">

<PreviewModal />

<script is:inline>
  // Handle contenteditable sync with inputs
  document.querySelectorAll('[contenteditable]').forEach(element => {
    element.addEventListener('input', (e) => {
      const inputId = e.target.dataset.input;
      if (inputId) {
        const input = document.getElementById(inputId);
        if (input) {
          input.value = e.target.textContent;
          input.dispatchEvent(new Event('input'));
        }
      }
    });
  });

  // Toggle verified badge
  function toggleVerified() {
    const verifiedInput = document.getElementById('verified-input');
    const twitterBadge = document.getElementById('verified-badge');
    const xBadge = document.getElementById('x-verified-badge');
    const isX = document.getElementById('platform-switch').checked;
    
    verifiedInput.checked = !verifiedInput.checked;
    
    // Toggle both badges
    twitterBadge.style.display = verifiedInput.checked ? 'inline' : 'none';
    if (xBadge) {
      xBadge.style.display = verifiedInput.checked ? 'inline' : 'none';
    }
    
    verifiedInput.dispatchEvent(new Event('input'));
  }

  // Updated Profile picture upload function for direct upload
  function uploadTwitterProfilePic() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    input.onchange = (e) => {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          // Initialize cropper with the image and handle the cropped result
          initImageCropper(e.target.result, 'twitter-profile', (croppedImageUrl) => {
            const profilePic = document.getElementById('profile-pic');
            const xProfilePic = document.getElementById('x-profile-pic');
            
            if (profilePic) profilePic.src = croppedImageUrl;
            if (xProfilePic) xProfilePic.src = croppedImageUrl;
            console.log('✅ Successfully updated Twitter profile picture');
          });
        };
        reader.readAsDataURL(file);
      }
    };
    input.click();
  }

  // Randomize stats
  function randomizeStats() {
    const formatNumber = (num) => {
      if (num >= 1000000) return (num/1000000).toFixed(1) + 'M';
      if (num >= 1000) return (num/1000).toFixed(1) + 'K';
      return num;
    };

    // Add views to the stats being randomized
    ['retweets', 'quotes', 'likes', 'views'].forEach(stat => {
      const randomNum = formatNumber(Math.floor(Math.random() * 1000000));
      const liveElement = document.getElementById(`live-${stat}`);
      const xLiveElement = document.getElementById(`x-live-${stat}`);
      const input = document.getElementById(`${stat}-input`);
      
      if (liveElement) liveElement.textContent = randomNum;
      if (xLiveElement) xLiveElement.textContent = randomNum;
      if (input) {
        input.value = randomNum;
        input.dispatchEvent(new Event('input'));
      }
    });
  }

  // Update the updateTheme function
  function updateTheme(theme) {
    const container = document.getElementById('tweet-preview');
    const xContainer = document.getElementById('x-preview');
    const themeInput = document.getElementById('theme-input');
    
    // Update Twitter container theme
    if (container) {
      container.setAttribute('data-theme', theme);
    }
    
    // Update X container theme
    if (xContainer) {
      const xPost = xContainer.querySelector('.x-post');
      if (xPost) {
        xPost.setAttribute('data-theme', theme);
      }
    }
    
    // Update the hidden input for the API
    if (themeInput) {
      themeInput.value = theme;
      themeInput.dispatchEvent(new Event('input'));
    }
  }

  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    // Sync initial values
    document.querySelectorAll('[contenteditable]').forEach(element => {
      const inputId = element.dataset.input;
      if (inputId) {
        const input = document.getElementById(inputId);
        if (input) {
          element.textContent = input.value;
        }
      }
      
      // Add listener for content changes to auto-adjust height
      element.addEventListener('input', debounce(updateHeightOnContentChange, 300));
    });

    // Add theme change handlers
    document.querySelectorAll('input[name="theme"]').forEach(radio => {
      radio.addEventListener('change', (e) => {
        updateTheme(e.target.value);
      });
    });

    // Set initial theme
    updateTheme('light');

    const widthInput = document.getElementById('image-width');
    const heightInput = document.getElementById('image-height');

    [widthInput, heightInput].forEach(input => {
      input.addEventListener('change', (e) => {
        const value = parseInt(e.target.value);
        if (value < 300) e.target.value = 300;
        if (value > 4096) e.target.value = 4096;
        updateEditBoxSize();
        updatePreviewDimensions();
      });
    });

    // Set optimal size based on user's display width
    setOptimalSize();

    // Listen for window resize to adjust size as needed
    window.addEventListener('resize', debounce(setOptimalSize, 250));

    // Initialize platform style
    const platformSwitch = document.getElementById('platform-switch');
    platformSwitch.addEventListener('change', function() {
      togglePlatformStyle(this.checked);
      // Adjust height for the newly displayed platform
      setTimeout(updateHeightOnContentChange, 50);
    });
    
    togglePlatformStyle(platformSwitch.checked);
    
    // Set initial platform attribute
    document.getElementById('tweet-preview').setAttribute('data-platform', 'twitter');
  });

  // Add debounce function to prevent excessive resize calculations
  function debounce(func, wait) {
    let timeout;
    return function() {
      const context = this;
      const args = arguments;
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(context, args), wait);
    };
  }

  // Function to calculate and set optimal size based on user's display
  function setOptimalSize() {
    // Get viewport width
    const viewportWidth = window.innerWidth;
    
    // Calculate optimal width based on viewport
    let optimalWidth = 600; // Default width
    
    if (viewportWidth < 768) {
      // For mobile, use 90% of viewport width, but not less than 300px
      optimalWidth = Math.max(Math.round(viewportWidth * 0.9), 300);
    } else if (viewportWidth < 1200) {
      // For tablets, use 70% of viewport width
      optimalWidth = Math.round(viewportWidth * 0.7);
    } else {
      // For larger screens, cap at 800px
      optimalWidth = Math.min(Math.round(viewportWidth * 0.5), 800);
    }
    
    // Set width to input
    document.getElementById('image-width').value = optimalWidth;
    
    // Apply the new width and calculate height based on content
    updateEditBoxSize(true);
    
    console.log(`Optimal size set with width: ${optimalWidth}px and auto-height based on content`);
  }

  // Update the function to handle size updates for both Twitter and X
  function updateEditBoxSize(autoHeight = false) {
    const width = parseInt(document.getElementById('image-width').value);
    let height = parseInt(document.getElementById('image-height').value);
    
    // Update Twitter wrapper
    const twitterWrapper = document.getElementById('tweet-wrapper');
    const twitterContainer = document.getElementById('tweet-preview');
    
    if (twitterWrapper && twitterContainer) {
      // Set the width
      twitterWrapper.style.width = `${width}px`;
      
      if (autoHeight) {
        // Auto-calculate height based on content
        // First, remove any max-height constraints
        twitterContainer.style.minHeight = 'auto';
        twitterContainer.style.maxHeight = 'none';
        twitterContainer.style.height = 'auto';
        twitterContainer.style.overflowY = 'visible';
        
        // Let the layout settle
        setTimeout(() => {
          // Get the actual content height
          const actualHeight = twitterContainer.scrollHeight;
          
          // Add a small buffer (15px) for padding
          const optimalHeight = actualHeight + 15;
          
          // Update the height input
          document.getElementById('image-height').value = optimalHeight;
          
          // Update the container height now that we know the actual content height
          if (!document.getElementById('platform-switch').checked) {
            twitterContainer.style.minHeight = `${optimalHeight}px`;
          }
          
          console.log(`Content-based height set to: ${optimalHeight}px`);
        }, 10);
      } else {
        // Use the manually set height
        twitterContainer.style.minHeight = `${height}px`;
        twitterContainer.style.maxHeight = 'none';
        twitterContainer.style.overflowY = 'visible';
      }
    }
    
    // Update X wrapper
    const xWrapper = document.getElementById('x-wrapper');
    const xContainer = document.getElementById('x-preview');
    
    if (xWrapper && xContainer) {
      // Set the width
      xWrapper.style.width = `${width}px`;
      
      if (autoHeight) {
        // Auto-calculate height based on content
        // First, remove any max-height constraints
        xContainer.style.minHeight = 'auto';
        xContainer.style.maxHeight = 'none';
        xContainer.style.height = 'auto';
        xContainer.style.overflowY = 'visible';
        
        // Let the layout settle
        setTimeout(() => {
          // Get the actual content height
          const actualHeight = xContainer.scrollHeight;
          
          // Add a small buffer (15px) for padding
          const optimalHeight = actualHeight + 15;
          
          // Update the height input if X is active
          if (document.getElementById('platform-switch').checked) {
            document.getElementById('image-height').value = optimalHeight;
            xContainer.style.minHeight = `${optimalHeight}px`;
          }
        }, 10);
      } else {
        // Use the manually set height
        xContainer.style.minHeight = `${height}px`;
        xContainer.style.maxHeight = 'none';
        xContainer.style.overflowY = 'visible';
      }
    }
  }
  
  // Add a function to update height based on content changes
  function updateHeightOnContentChange() {
    // Check if the container is visible before trying to measure it
    const isPlatformX = document.getElementById('platform-switch').checked;
    const activeContainer = isPlatformX ? 
      document.getElementById('x-preview') : 
      document.getElementById('tweet-preview');
    
    if (!activeContainer || activeContainer.offsetParent === null) {
      return; // Skip if container is not visible
    }
    
    // Get current width
    const width = parseInt(document.getElementById('image-width').value);
    
    // Remove height constraints to measure natural height
    activeContainer.style.minHeight = 'auto';
    activeContainer.style.maxHeight = 'none';
    activeContainer.style.height = 'auto';
    
    // Wait for any content changes to apply
    setTimeout(() => {
      const contentHeight = activeContainer.scrollHeight;
      const optimalHeight = contentHeight + 15; // Small buffer
      
      // Update height input and container
      document.getElementById('image-height').value = optimalHeight;
      activeContainer.style.minHeight = `${optimalHeight}px`;
      
      console.log(`Height adjusted to fit content: ${optimalHeight}px`);
    }, 10);
  }

  // Update the togglePlatformStyle function
  function togglePlatformStyle(isX) {
    const twitterContainer = document.getElementById('tweet-preview');
    const xContainer = document.getElementById('x-preview');
    const mockupHeader = document.querySelector('.mockup-header');
    const headerTitle = mockupHeader.querySelector('h2');
    const headerDesc = mockupHeader.querySelector('p');
    
    // Toggle visibility
    twitterContainer.style.display = isX ? 'none' : 'block';
    xContainer.style.display = isX ? 'block' : 'none';
    
    // Update header text
    headerTitle.textContent = isX ? 'X Post' : 'Twitter Post';
    headerDesc.textContent = `Create a realistic ${isX ? 'X' : 'Twitter'} post mockup by editing the content below.`;
    
    // Update container attributes
    twitterContainer.setAttribute('data-platform', isX ? 'x' : 'twitter');
    
    // Update stats labels only in Twitter container
    if (!isX) {
      const statsLabels = {
        retweets: 'Retweets',
        quotes: 'Quote Tweets',
        likes: 'Likes'
      };
      
      Object.entries(statsLabels).forEach(([stat, label]) => {
        const statElement = twitterContainer.querySelector(`#live-${stat}`).nextElementSibling;
        statElement.textContent = label;
      });
    }

    // Sync content between designs
    syncContent(isX);
  }

  // Add the syncContent function
  function syncContent(isX) {
    const twitterContainer = document.getElementById('tweet-preview');
    const xContainer = document.getElementById('x-preview');
    
    if (isX) {
      // Update X design with Twitter content
      const name = twitterContainer.querySelector('#live-name').textContent;
      const handle = twitterContainer.querySelector('#live-handle').textContent;
      const text = twitterContainer.querySelector('#live-text').textContent;
      const date = twitterContainer.querySelector('#live-date').textContent;
      const verified = twitterContainer.querySelector('#verified-badge').style.display !== 'none';
      const profilePic = twitterContainer.querySelector('#profile-pic').src;
      const views = document.getElementById('views-input')?.value || '0';
      
      // Update X elements
      xContainer.querySelector('#x-live-name').textContent = name;
      xContainer.querySelector('#x-live-handle').textContent = handle;
      xContainer.querySelector('#x-live-text').textContent = text;
      xContainer.querySelector('#x-live-date').textContent = date;
      xContainer.querySelector('#x-verified-badge').style.display = verified ? 'inline' : 'none';
      xContainer.querySelector('#x-profile-pic').src = profilePic;
      xContainer.querySelector('#x-live-views').textContent = views;
    } else {
      // Update Twitter design with X content
      const name = xContainer.querySelector('#x-live-name').textContent;
      const handle = xContainer.querySelector('#x-live-handle').textContent;
      const text = xContainer.querySelector('#x-live-text').textContent;
      const date = xContainer.querySelector('#x-live-date').textContent;
      const verified = xContainer.querySelector('#x-verified-badge').style.display !== 'none';
      const profilePic = xContainer.querySelector('#x-profile-pic').src;
      const views = xContainer.querySelector('#x-live-views').textContent;
      
      // Update Twitter elements
      twitterContainer.querySelector('#live-name').textContent = name;
      twitterContainer.querySelector('#live-handle').textContent = handle;
      twitterContainer.querySelector('#live-text').textContent = text;
      twitterContainer.querySelector('#live-date').textContent = date;
      twitterContainer.querySelector('#verified-badge').style.display = verified ? 'inline' : 'none';
      twitterContainer.querySelector('#profile-pic').src = profilePic;
      if (document.getElementById('views-input')) {
        document.getElementById('views-input').value = views;
      }
    }
  }

  // Add these new functions for dimension controls
  function adjustDimension(type, delta) {
    const input = document.getElementById(`image-${type}`);
    const currentValue = parseInt(input.value) || 0;
    const step = event.shiftKey ? 10 : 1; // Larger step when Shift is held
    const newValue = currentValue + (delta * step);
    
    validateDimension(input, 300, 4096, newValue);
    updateEditBoxSize();
    updatePreviewDimensions();
  }

  function validateDimension(input, min, max, value = null) {
    let newValue = value !== null ? value : parseInt(input.value) || 0;
    
    if (newValue < min) newValue = min;
    if (newValue > max) newValue = max;
    
    input.value = newValue;
    
    // Trigger change event for other listeners
    input.dispatchEvent(new Event('change'));
  }

  // Add keyboard support for increment/decrement
  document.querySelectorAll('.modern-input').forEach(input => {
    input.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowUp') {
        e.preventDefault();
        const type = input.id.replace('image-', '');
        adjustDimension(type, 1);
      } else if (e.key === 'ArrowDown') {
        e.preventDefault();
        const type = input.id.replace('image-', '');
        adjustDimension(type, -1);
      }
    });
  });

  // Add html2canvas script
  document.addEventListener('DOMContentLoaded', function() {
    const script = document.createElement('script');
    script.src = 'https://html2canvas.hertzen.com/dist/html2canvas.min.js';
    script.async = true;
    document.head.appendChild(script);
  });

  // Update resetSize to use the optimal size calculation
  function resetSize() {
    setOptimalSize();
    
    const dimensionsDisplay = document.getElementById('preview-dimensions');
    if (dimensionsDisplay) {
      setTimeout(() => {
        const width = document.getElementById('image-width').value;
        const height = document.getElementById('image-height').value;
        dimensionsDisplay.textContent = `${width}×${height}`;
      }, 50);
    }
  }

  // Update the preview modal to show current dimensions
  function updatePreviewDimensions() {
    const width = document.getElementById('image-width').value;
    const height = document.getElementById('image-height').value;
    const previewImage = document.getElementById('preview-image');
    
    // Update preview container style to maintain aspect ratio
    const container = document.querySelector('.preview-container');
    if (container) {
      container.style.aspectRatio = `${width} / ${height}`;
    }
  }
</script> 