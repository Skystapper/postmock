---
interface Props {
  username: string;
  handle: string;
  verified: boolean;
  text: string;
  date: string;
  views: string;
  replies: string;
  reposts: string;
  likes: string;
  bookmarks: string;
  profileImage?: string;
  theme?: 'light' | 'dim' | 'dark';
}

const {
  username,
  handle,
  verified = false,
  text,
  date,
  views = '0',
  replies = '0',
  reposts = '0',
  likes = '0',
  bookmarks = '0',
  profileImage = 'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"%3E%3Cpath fill="%23999" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"/%3E%3C/svg%3E',
  theme = 'dark'
} = Astro.props;
---

<div class="x-container" data-theme={theme}>
  <div class="post-container">
    <!-- Header -->
    <div class="post-header">
      <div 
        class="avatar cursor-pointer" 
        onclick="uploadProfilePic()"
        role="button"
        title="Click to change profile picture"
      >
        <img id="x-profile-pic" src={profileImage} alt={username} />
      </div>
      <div class="user-info">
        <div class="name-container">
          <span 
            class="name" 
            contenteditable="true"
            id="x-live-name"
            data-input="username-input"
          >{username}</span>
          <span class="verified-badge" id="x-verified-badge" onclick="toggleXVerified()" style={verified ? 'display:inline' : 'display:none'}>
            <svg viewBox="0 0 22 22" aria-label="Verified account" role="img" class="verified-icon" data-testid="icon-verified">
              <g>
                <path 
                  clip-rule="evenodd" 
                  d="M12.05 2.056c-.568-.608-1.532-.608-2.1 0l-1.393 1.49c-.284.303-.685.47-1.1.455L5.42 3.932c-.832-.028-1.514.654-1.486 1.486l.069 2.039c.014.415-.152.816-.456 1.1l-1.49 1.392c-.608.568-.608 1.533 0 2.101l1.49 1.393c.304.284.47.684.456 1.1l-.07 2.038c-.027.832.655 1.514 1.487 1.486l2.038-.069c.415-.014.816.152 1.1.455l1.392 1.49c.569.609 1.533.609 2.102 0l1.393-1.49c.283-.303.684-.47 1.099-.455l2.038.069c.832.028 1.515-.654 1.486-1.486L18 14.542c-.015-.415.152-.815.455-1.099l1.49-1.393c.608-.568.608-1.533 0-2.101l-1.49-1.393c-.303-.283-.47-.684-.455-1.1l.068-2.038c.029-.832-.654-1.514-1.486-1.486l-2.038.07c-.415.013-.816-.153-1.1-.456zm-5.817 9.367l3.429 3.428 5.683-6.206-1.347-1.247-4.4 4.795-2.072-2.072z" 
                  fill="#829aab" 
                  fill-rule="evenodd"
                />
              </g>
            </svg>
          </span>
          <span class="verified-badge faded-badge" id="x-faded-badge" onclick="toggleXVerified()" style={verified ? 'display:none' : 'display:inline'}>
            <svg viewBox="0 0 22 22" aria-label="Verified account" role="img" class="verified-icon" data-testid="icon-verified" style="opacity:0.5;">
              <g>
                <path 
                  clip-rule="evenodd" 
                  d="M12.05 2.056c-.568-.608-1.532-.608-2.1 0l-1.393 1.49c-.284.303-.685.47-1.1.455L5.42 3.932c-.832-.028-1.514.654-1.486 1.486l.069 2.039c.014.415-.152.816-.456 1.1l-1.49 1.392c-.608.568-.608 1.533 0 2.101l1.49 1.393c.304.284.47.684.456 1.1l-.07 2.038c-.027.832.655 1.514 1.487 1.486l2.038-.069c.415-.014.816.152 1.1.455l1.392 1.49c.569.609 1.533.609 2.102 0l1.393-1.49c.283-.303.684-.47 1.099-.455l2.038.069c.832.028 1.515-.654 1.486-1.486L18 14.542c-.015-.415.152-.815.455-1.099l1.49-1.393c.608-.568.608-1.533 0-2.101l-1.49-1.393c-.303-.283-.47-.684-.455-1.1l.068-2.038c.029-.832-.654-1.514-1.486-1.486l-2.038.07c-.415.013-.816-.153-1.1-.456zm-5.817 9.367l3.429 3.428 5.683-6.206-1.347-1.247-4.4 4.795-2.072-2.072z" 
                  fill="#829aab" 
                  fill-rule="evenodd"
                />
              </g>
            </svg>
          </span>
        </div>
        <span 
          class="handle" 
          contenteditable="true"
          id="x-live-handle"
          data-input="handle-input"
        >@{handle}</span>
      </div>
      <div class="more-options">
        <div class="dropdown">
          <button class="btn btn-link" data-bs-toggle="dropdown">
            <svg viewBox="0 0 24 24"><path d="M3 12c0-1.1.9-2 2-2s2 .9 2 2-.9 2-2 2-2-.9-2-2zm9 2c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm7 0c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z"/></svg>
          </button>
          <ul class="dropdown-menu">
            <li><button class="dropdown-item" onclick="toggleVerified()">
              <i class="bi bi-patch-check"></i> Toggle verified
            </button></li>
            <li><button class="dropdown-item" onclick="uploadProfilePic()">
              <i class="bi bi-camera"></i> Change profile picture
            </button></li>
          </ul>
        </div>
      </div>
    </div>

    <!-- Content -->
    <div 
      class="post-content" 
      contenteditable="true"
      id="x-live-text"
      data-input="text-input"
    >
      <p>{text}</p>
    </div>

    <!-- Meta -->
    <div class="post-meta">
      <span 
        class="time"
        contenteditable="true"
        id="x-live-date"
        data-input="date-input"
      >{date}</span>
      <span class="separator">Â·</span>
      <span 
        class="views"
        contenteditable="true"
        id="x-live-views"
        data-input="views-input"
      >{views}</span>
      <span>Views</span>
    </div>

    <!-- Stats -->
    <div class="post-stats">
      <button class="stat-item">
        <svg viewBox="0 0 24 24"><path d="M1.751 10c0-4.42 3.584-8 8.005-8h4.366c4.49 0 8.129 3.64 8.129 8.13 0 2.96-1.607 5.68-4.196 7.11l-8.054 4.46v-3.69h-.067c-4.49.1-8.183-3.51-8.183-8.01zm8.005-6c-3.317 0-6.005 2.69-6.005 6 0 3.37 2.77 6.08 6.138 6.01l.351-.01h1.761v2.3l5.087-2.81c1.951-1.08 3.163-3.13 3.163-5.36 0-3.39-2.744-6.13-6.129-6.13H9.756z"/></svg>
        <span 
          contenteditable="true"
          id="x-live-replies"
          data-input="replies-input"
        >{replies}</span>
      </button>
      <button class="stat-item">
        <svg viewBox="0 0 24 24"><path d="M4.5 3.88l4.432 4.14-1.364 1.46L5.5 7.55V16c0 1.1.896 2 2 2H13v2H7.5c-2.209 0-4-1.79-4-4V7.55L1.432 9.48.068 8.02 4.5 3.88zM16.5 6H11V4h5.5c2.209 0 4 1.79 4 4v8.45l2.068-1.93 1.364 1.46-4.432 4.14-4.432-4.14 1.364-1.46 2.068 1.93V8c0-1.1-.896-2-2-2z"/></svg>
        <span 
          contenteditable="true"
          id="x-live-reposts"
          data-input="reposts-input"
        >{reposts}</span>
      </button>
      <button class="stat-item">
        <svg viewBox="0 0 24 24"><path d="M16.697 5.5c-1.222-.06-2.679.51-3.89 2.16l-.805 1.09-.806-1.09C9.984 6.01 8.526 5.44 7.304 5.5c-1.243.07-2.349.78-2.91 1.91-.552 1.12-.633 2.78.479 4.82 1.074 1.97 3.257 4.27 7.129 6.61 3.87-2.34 6.052-4.64 7.126-6.61 1.111-2.04 1.03-3.7.477-4.82-.561-1.13-1.666-1.84-2.908-1.91zm4.187 7.69c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"/></svg>
        <span 
          contenteditable="true"
          id="x-live-likes"
          data-input="likes-input"
        >{likes}</span>
      </button>
      <button class="stat-item">
        <svg viewBox="0 0 24 24"><path d="M4 4.5C4 3.12 5.119 2 6.5 2h11C18.881 2 20 3.12 20 4.5v18.44l-8-5.71-8 5.71V4.5zM6.5 4c-.276 0-.5.22-.5.5v14.56l6-4.29 6 4.29V4.5c0-.28-.224-.5-.5-.5h-11z"/></svg>
        <span 
          contenteditable="true"
          id="x-live-bookmarks"
          data-input="bookmarks-input"
        >{bookmarks}</span>
      </button>
      <button class="stat-item">
        <svg viewBox="0 0 24 24"><path d="M12 2.59l5.7 5.7-1.41 1.42L13 6.41V16h-2V6.41l-3.3 3.3-1.41-1.42L12 2.59zM21 15l-.02 3.51c0 1.38-1.12 2.49-2.5 2.49H5.5C4.11 21 3 19.88 3 18.5V15h2v3.5c0 .28.22.5.5.5h12.98c.28 0 .5-.22.5-.5L19 15h2z"/></svg>
      </button>
    </div>
  </div>
</div>

<style>
  :root {
    /* X theme variables */
    --x-bg-light: #fff;
    --x-bg-dark: #000;
    --x-bg-dim: #15202B;
    --x-text-light: #0f1419;
    --x-text-dark: #e7e9ea;
    --x-text-dim: #f7f9f9;
    --x-secondary-light: #536471;
    --x-secondary-dark: #71767b;
    --x-secondary-dim: #8b98a5;
    --x-border-light: #eff3f4;
    --x-border-dark: #2f3336;
    --x-border-dim: #38444d;
    --x-shadow-dark: rgba(255, 255, 255, 0.1);
    --x-shadow-dim: rgba(136, 153, 166, 0.2);
  }

  .x-container[data-theme="light"] {
    background: var(--x-bg-light);
    color: var(--x-text-light);
    border: 1px solid var(--x-border-light);
  }
  
  .x-container[data-theme="dark"] {
    background: var(--x-bg-dark);
    color: var(--x-text-dark);
    border: 1px solid var(--x-border-dark);
    box-shadow: 0 0 12px 2px rgba(255, 255, 255, 0.05), 0 0 24px 2px rgba(255, 255, 255, 0.1);
  }
  
  .x-container[data-theme="dim"] {
    background: var(--x-bg-dim);
    color: var(--x-text-dim);
    border: 1px solid var(--x-border-dim);
    box-shadow: 0 2px 12px var(--x-shadow-dim), 0 0 20px rgba(29, 155, 240, 0.1);
  }

  /* Update secondary text colors for each theme */
  .x-container[data-theme="light"] .handle,
  .x-container[data-theme="light"] .post-meta,
  .x-container[data-theme="light"] .stat-item {
    color: var(--x-secondary-light);
  }

  .x-container[data-theme="dark"] .handle,
  .x-container[data-theme="dark"] .post-meta,
  .x-container[data-theme="dark"] .stat-item {
    color: var(--x-secondary-dark);
  }

  .x-container[data-theme="dim"] .handle,
  .x-container[data-theme="dim"] .post-meta,
  .x-container[data-theme="dim"] .stat-item {
    color: var(--x-secondary-dim);
  }

  /* Update hover states for each theme */
  .x-container[data-theme="light"] .stat-item:hover {
    color: #1da1f2;
  }

  .x-container[data-theme="dark"] .stat-item:hover,
  .x-container[data-theme="dim"] .stat-item:hover {
    color: #1d9bf0;
  }

  /* Update contenteditable hover and focus states */
  .x-container[data-theme="light"] [contenteditable]:hover {
    background: rgba(0, 0, 0, 0.05);
  }

  .x-container[data-theme="dark"] [contenteditable]:hover,
  .x-container[data-theme="dim"] [contenteditable]:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .x-container[data-theme="light"] [contenteditable]:focus {
    background: rgba(29, 155, 240, 0.1);
    box-shadow: 0 0 0 1px rgba(29, 155, 240, 0.3);
  }

  .x-container[data-theme="dark"] [contenteditable]:focus,
  .x-container[data-theme="dim"] [contenteditable]:focus {
    background: rgba(29, 155, 240, 0.1);
    box-shadow: 0 0 0 1px rgba(29, 155, 240, 0.3);
  }

  .x-container {
    width: 100%;
    height: auto;
    max-width: 600px; /* Default desktop size */
    margin: 0 auto;
    padding: 16px;
    border-radius: 16px;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    box-sizing: border-box;
    overflow: visible; /* Change from hidden to visible */
  }

  /* Ensure post container takes full width */
  .post-container {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  /* Adjust container size based on preview mode */
  body[data-preview-mode="phone"] .x-container {
    max-width: 380px;
  }

  /* Ensure proper scaling in mobile view */
  @media (max-width: 768px) {
    .x-container {
      width: 100%;
      max-width: min(600px, 100%);
      transform-origin: top center;
    }

    body[data-preview-mode="phone"] .x-container {
      max-width: min(380px, 100%);
    }
  }

  /* Post container styles */
  .post-container {
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  .post-header {
    display: flex;
    align-items: flex-start;
    gap: 12px;
    margin-bottom: 4px;
  }
  .avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    overflow: hidden;
    flex-shrink: 0;
  }
  .avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 50%;
  }
  .user-info {
    flex-grow: 1;
    min-width: 0;
  }
  .name-container {
    display: flex;
    align-items: center;
    gap: 4px;
    font-size: 15px;
    font-weight: 700;
    line-height: 20px;
    color: inherit;
  }
  .name {
    font-size: 15px;
    font-weight: 700;
    color: inherit;
    line-height: 20px;
    margin-right: 4px;
    word-break: break-word;
  }
  .verified-badge {
    display: inline-flex;
    width: 18px;
    height: 18px;
    vertical-align: middle;
    margin-right: 4px;
  }
  .verified-badge .verified-icon {
    width: 18px;
    height: 18px;
    stroke-width: 1.5;
  }
  .handle {
    font-size: 15px;
    font-weight: 400;
    color: var(--x-secondary-light);
    line-height: 20px;
    margin-right: 4px;
    word-break: break-all;
  }
  .x-container[data-theme="dark"] .handle {
    color: var(--x-secondary-dark);
  }
  .more-options {
    margin-left: auto;
    display: flex;
    align-items: flex-start;
  }
  .more-options button {
    background: none;
    border: none;
    padding: 4px;
    cursor: pointer;
    border-radius: 50%;
    color: var(--x-secondary-light);
    transition: background 0.2s;
  }
  .x-container[data-theme="dark"] .more-options button {
    color: var(--x-secondary-dark);
  }
  .more-options button:hover {
    background: #f7f9fa;
  }
  .x-container[data-theme="dark"] .more-options button:hover {
    background: #16181c;
  }
  .more-options svg {
    width: 20px;
    height: 20px;
    fill: currentColor;
  }
  .post-content {
    flex: 1;
    min-height: 0;
    margin-bottom: 12px;
    font-size: 17px;
    font-weight: 400;
    line-height: 24px;
    color: inherit;
    word-break: break-word;
    white-space: pre-wrap;
  }
  .post-meta {
    color: var(--x-secondary-light);
    font-size: 14px;
    font-weight: 400;
    margin-bottom: 0;
    display: flex;
    align-items: center;
    gap: 4px;
    line-height: 20px;
  }
  .x-container[data-theme="dark"] .post-meta {
    color: var(--x-secondary-dark);
  }
  .separator {
    margin: 0 4px;
    color: inherit;
  }
  .post-stats {
    display: flex;
    flex-direction: row;
    align-items: stretch;
    justify-content: space-between;
    padding-left: 4px;
    padding-right: 4px;
    column-gap: 4px;
    min-height: 1.875rem;
    height: 48px;
    border-top: 1px solid var(--x-border-light);
    border-bottom: 1px solid var(--x-border-light);
    margin-top: 8px;
    margin-bottom: 0;
    background: none;
    z-index: 0;
  }
  .x-container[data-theme="dark"] .post-stats {
    border-top: 1px solid var(--x-border-dark);
    border-bottom: 1px solid var(--x-border-dark);
  }
  .stat-item {
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    color: var(--x-secondary-light);
    font-size: 14px;
    font-weight: 500;
    line-height: 20px;
    transition: color 0.2s;
    flex: 1 1 0;
    justify-content: center;
    min-width: 0;
  }
  .x-container[data-theme="dark"] .stat-item {
    color: var(--x-secondary-dark);
  }
  .stat-item svg {
    width: 18px;
    height: 18px;
    fill: currentColor;
    stroke-width: 1.5;
    display: block;
  }
  .stat-item span {
    font-size: 14px;
    font-weight: 500;
    line-height: 20px;
  }
  .stat-item:hover {
    color: #1da1f2;
  }
  [contenteditable] {
    outline: none;
    padding: 2px 4px;
    border-radius: 4px;
  }
  [contenteditable]:hover {
    background: rgba(255, 255, 255, 0.1);
  }
  [contenteditable]:focus {
    background: rgba(29, 155, 240, 0.1);
    box-shadow: 0 0 0 1px rgba(29, 155, 240, 0.3);
  }
  .x-container[data-theme="light"] [contenteditable]:hover {
    background: rgba(0, 0, 0, 0.05);
  }
  .x-container[data-theme="light"] [contenteditable]:focus {
    background: rgba(29, 155, 240, 0.1);
  }
  .cursor-pointer {
    cursor: pointer;
  }
  .avatar {
    transition: opacity 0.2s ease;
  }
  .avatar:hover {
    opacity: 0.8;
  }
  .faded-badge {
    display: none;
    opacity: 0.5;
    transition: opacity 0.3s ease;
  }
  .name-container:hover .faded-badge {
    opacity: 1;
  }
  .x-container::before,
  .x-container:hover::before {
    display: none !important;
    content: none !important;
  }
</style>

<script is:inline>
function uploadProfilePic() {
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = 'image/*';
  input.onchange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        // Initialize cropper with the image and handle the cropped result
        initImageCropper(e.target.result, 'x-profile', (croppedImageUrl) => {
          // Update all x-profile-pic elements across the page
          const xProfilePics = document.querySelectorAll('#x-profile-pic');
          xProfilePics.forEach(pic => {
            if (pic) {
              pic.src = croppedImageUrl;
              console.log('â Updated an X profile picture element');
            }
          });
          
          // Also check for mobile version
          const mobileXProfilePic = document.getElementById('mobile-x-profile-pic');
          if (mobileXProfilePic) {
            mobileXProfilePic.src = croppedImageUrl;
            console.log('â Updated mobile X profile picture');
          }
          
          // Store the image in localStorage to persist across refreshes
          try {
            localStorage.setItem('x-profile-pic', croppedImageUrl);
            console.log('â Saved X profile picture to localStorage');
          } catch (e) {
            console.warn('Could not save profile picture to localStorage:', e);
          }
        });
      };
      reader.readAsDataURL(file);
    }
  };
  input.click();
}

// Toggle verified badge for X
function toggleXVerified() {
  const verifiedBadge = document.getElementById('x-verified-badge');
  const fadedBadge = document.getElementById('x-faded-badge');
  const isVisible = verifiedBadge.style.display !== 'none';
  verifiedBadge.style.display = isVisible ? 'none' : 'inline';
  fadedBadge.style.display = isVisible ? 'inline' : 'none';
}

// Add mode detection and update to ensure container respects preview mode
document.addEventListener('DOMContentLoaded', function() {
  // Check if there's a saved profile picture and load it
  try {
    const savedXProfilePic = localStorage.getItem('x-profile-pic');
    if (savedXProfilePic) {
      const xProfilePics = document.querySelectorAll('#x-profile-pic');
      xProfilePics.forEach(pic => {
        if (pic) {
          pic.src = savedXProfilePic;
          console.log('â Loaded saved X profile picture');
        }
      });
      
      // Also update mobile version if it exists
      const mobileXProfilePic = document.getElementById('mobile-x-profile-pic');
      if (mobileXProfilePic) {
        mobileXProfilePic.src = savedXProfilePic;
      }
    }
  } catch (e) {
    console.warn('Could not load profile picture from localStorage:', e);
  }
  
  // Initial sync with body attribute
  const initialMode = document.body.getAttribute('data-preview-mode') || 'desktop';
  
  // Function to update X container sizing based on mode
  function updateXContainerSize() {
    const currentMode = document.body.getAttribute('data-preview-mode') || 'desktop';
    const xContainers = document.querySelectorAll('.x-container');
    
    xContainers.forEach(container => {
      if (currentMode === 'desktop') {
        container.style.width = '600px';
      } else {
        container.style.width = '380px';
      }
    });
  }
  
  // Run once on load
  updateXContainerSize();
  
  // Listen for mode changes
  const observer = new MutationObserver(mutations => {
    mutations.forEach(mutation => {
      if (mutation.attributeName === 'data-preview-mode') {
        updateXContainerSize();
      }
    });
  });
  
  // Start observing the document body for attribute changes
  observer.observe(document.body, { attributes: true });
  
  // Handle badges hover (existing code)
  document.querySelectorAll('.x-container .user-info .name-container').forEach(nameContainer => {
    nameContainer.addEventListener('mouseenter', () => {
      // Find the contained badges - scoped to this specific container
      const fadedBadge = nameContainer.querySelector('.faded-badge');
      const verifiedBadge = nameContainer.querySelector('.verified-badge:not(.faded-badge)');
      
      if (verifiedBadge && fadedBadge && verifiedBadge.style.display === 'none') {
        fadedBadge.style.display = 'inline';
      }
    });
    
    nameContainer.addEventListener('mouseleave', () => {
      // Find the contained badges - scoped to this specific container
      const fadedBadge = nameContainer.querySelector('.faded-badge');
      const verifiedBadge = nameContainer.querySelector('.verified-badge:not(.faded-badge)');
      
      if (verifiedBadge && fadedBadge && verifiedBadge.style.display === 'none') {
        fadedBadge.style.display = 'none';
      }
    });
  });
});

// Fix for the avatar image not showing after preview
function checkClonedProfileImages() {
  // When a modal or preview is opened, fix profile images in cloned content
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.addedNodes && mutation.addedNodes.length) {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === 1) { // Element node
            // Check if this new node is a preview container or has one
            const previewContainer = node.id === 'previewContainer' ? node : node.querySelector('#previewContainer');
            if (previewContainer) {
              // Find the profile image in the preview and update it
              const savedXProfilePic = localStorage.getItem('x-profile-pic');
              if (savedXProfilePic) {
                const clonedProfilePics = previewContainer.querySelectorAll('#x-profile-pic');
                clonedProfilePics.forEach(pic => {
                  pic.src = savedXProfilePic;
                  console.log('â Updated cloned X profile picture in preview');
                });
              }
            }
          }
        });
      }
    });
  });
  
  // Observe the document for new nodes
  observer.observe(document.body, { childList: true, subtree: true });
}

// Run this when the page loads
document.addEventListener('DOMContentLoaded', checkClonedProfileImages);

document.addEventListener('DOMContentLoaded', function() {
  // Update theme handling to be more consistent
  function updateXContainerTheme(container) {
    const theme = document.body.getAttribute('data-theme') || 
                 document.querySelector('.app-container')?.getAttribute('data-theme') || 
                 'light';
    container.setAttribute('data-theme', theme);
  }

  // Find all X containers and update their themes
  const xContainers = document.querySelectorAll('.x-container');
  xContainers.forEach(updateXContainerTheme);

  // Watch for theme changes on body and app-container
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.attributeName === 'data-theme') {
        xContainers.forEach(updateXContainerTheme);
      }
    });
  });

  observer.observe(document.body, { attributes: true });
  
  const appContainer = document.querySelector('.app-container');
  if (appContainer) {
    observer.observe(appContainer, { attributes: true });
  }
});
</script> 